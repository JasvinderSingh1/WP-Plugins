<?php
/*
* Plugin Name: Basic Plugin Str
* Author: Clag Dev
* Text Domain: basic-plugin-str
* Description: This is the custom price calculator plugin
* Version: 1.0.0
*/




/*
* Check if WooCommerce is active
*/
if ( in_array( 'woocommerce/woocommerce.php', apply_filters( 'active_plugins', get_option( 'active_plugins' ) ) ) ) {
 
define( 'basicpluginstr_VERSION', '1.0.0' );
define( 'basicpluginstr_URI', plugin_dir_url( __FILE__ ) );
class basicpluginstr
{
	
	function __construct()
	{
		//Load textdomain
		add_action( 'plugins_loaded', array( $this, 'basicpluginstr_load_textdomain' ) );

		// Product data tabs
		add_filter( 'woocommerce_product_data_tabs', array( $this,'basicpluginstr_product_data_tabs') );

		// Product data panels
		add_action( 'woocommerce_product_data_panels', array( $this,'basicpluginstr_product_data_panels') );

		// Product data
		add_action( 'save_post', array( $this, 'basicpluginstr_save_option_field' ) );

		// Frontend Product data
		add_action( 'woocommerce_before_add_to_cart_button', array( $this, 'basicpluginstr_add_to_cart_form' ), 10 );

		// Enqueue backend scripts
		add_action( 'admin_enqueue_scripts', array( $this, 'basicpluginstr_admin_enqueue_scripts' ) );
		add_action( 'wp_ajax_basicpluginstr_myback_action', array( $this,'basicpluginstr_myback_action_function'));
		add_action( 'wp_ajax_nopriv_basicpluginstr_myback_action', array( $this,'basicpluginstr_myback_action_function'));

		// Add front-end ajax
		add_action( 'wp_enqueue_scripts', array( $this,'basicpluginstr_wp_enqueue_scripts'));
		add_action( 'wp_ajax_basicpluginstr_my_action', array( $this,'basicpluginstr_my_action_function'));
		add_action( 'wp_ajax_nopriv_basicpluginstr_my_action', array( $this,'basicpluginstr_my_action_function'));


		/*
		* Start: Define cart data
		*/
		// Add to cart
		/*add_filter('woocommerce_add_cart_item', array($this, 'add_cart_item'), 10000, 1); 

		// Add item data to the cart or define custom variable
		add_filter( 'woocommerce_add_cart_item_data', array($this,'add_cart_item_data'),10000, 2 );
		// Display item data to the cart or show custom variable
		add_filter( 'woocommerce_get_item_data', array($this,'cus_woocommerce_get_item_data'), 10, 2 );

		// Load cart data per page load
		add_filter('woocommerce_get_cart_item_from_session', array($this, 'get_cart_item_from_session'), 10000, 2); 

		//Add meta to order - WC 2.x or save the data when the order is made
		add_action( 'woocommerce_add_order_item_meta',  array($this,'cus_woocommerce_add_order_item_meta') , 10, 2 );*/
		/*
		* End: Define cart data
		*/


		//show pricing table on frontend
		//add_action('woocommerce_single_product_summary', array( $this,'basicpluginstr_price_table'), 5);

	}

	/*
	* Load  textdomain for language
	*/
	function basicpluginstr_load_textdomain(){
		load_plugin_textdomain( 'cus-price-cal', false, basename( dirname( __FILE__ ) ) . '/languages/' );
	}


	/*
	*
	*/
	function basicpluginstr_price_table(){

		echo "<h1>Priceing Table</h1>";

	}


	/*
	* Define backend script.
	*/
	function basicpluginstr_admin_enqueue_scripts() {

		wp_enqueue_style( 'basicpluginstr-backendcss', basicpluginstr_URI.'assets/css/basicpluginstr-backend.css' );

		wp_register_script( 'basicpluginstr_back_handle', basicpluginstr_URI.'assets/js/basicpluginstr-backend.js'); 

		$data = array(
			'product_id' => get_the_ID(),
			'ajaxurl'=> admin_url( 'admin-ajax.php')
		);
		wp_localize_script( 'basicpluginstr_back_handle', 'datab', $data );


		wp_enqueue_script( 'basicpluginstr_back_handle', basicpluginstr_URI.'assets/js/basicpluginstr-backend.js', array('jquery'), basicpluginstr_VERSION, 'all');
	}

	/*
	* Frontend scripts
	*/
	function basicpluginstr_wp_enqueue_scripts(){

		wp_enqueue_style('basicpluginstr-frontend_choosen', basicpluginstr_URI.'assets/css/chosen.css', array(), basicpluginstr_VERSION, 'all' );

		wp_enqueue_script( 'basicpluginstr_choosen_handle', basicpluginstr_URI.'assets/js/chosen.jquery.js', array('jquery'), basicpluginstr_VERSION, 'all');

		wp_enqueue_style('basicpluginstr-frontend', basicpluginstr_URI.'assets/css/basicpluginstr-fontend.css', array(), basicpluginstr_VERSION, 'all' );

		wp_register_script( 'basicpluginstr_front_handle', basicpluginstr_URI.'assets/js/basicpluginstr-fontend.js'); 

		$data = array(
			'product_id' => get_the_ID(),
			'ajaxurl'=> admin_url( 'admin-ajax.php')
		);
		wp_localize_script( 'basicpluginstr_front_handle', 'data', $data );


		wp_enqueue_script( 'basicpluginstr_front_handle', basicpluginstr_URI.'assets/js/basicpluginstr-fontend.js', array('jquery'), basicpluginstr_VERSION, 'all');

	}


	/*
	* Defined Product Data Tab 
	*/
	function basicpluginstr_product_data_tabs( $tabs ) {
		$tabs['basicpluginstr'] = array(
			'label'  => esc_html__( 'basicpluginstr', 'cus-price-cal' ),
			'target' => 'basicpluginstr_settings',
			'class'  => array( 'show_if_basicpluginstr' ),
		);
		return $tabs;
	}

	/*
	* Define Product Data Panel
	*/
 	function basicpluginstr_product_data_panels() {
		global $post;
		$post_id = $post->ID;
		$_basicpluginstrPdata = get_post_meta( $post_id, '_basicpluginstrPdata', true );

		$_pluginStatus = get_post_meta( $post_id, '_pluginStatus', true );

		$_standard_free = $_basicpluginstrPdata['standard_free'];

		?>
		<div id='basicpluginstr_settings' class='panel woocommerce_options_panel basicpluginstr_options_panel'>
			<h1>PPPPPPPPPP</h1>
		</div>
		<?php
	}

	/*
	* Save Product data Fields on Backend by post method
	*/
	function basicpluginstr_save_option_field( $post_id ) {  

		echo $post_id; 
		/*if (!empty($basicpluginstrPdata)) {
				update_post_meta( $productId, '_basicpluginstrPdata', $basicpluginstrPdata);
			}*/
		die();
	}

	/*
	* Save Product data Fields on Backend by ajax method
	*/
	function basicpluginstr_myback_action_function(){

		$productId = $_POST['product_id'];

		$pluginStatus = $_POST['pluginStatus'];

		$basicpluginstrPdata = array();

		$basicpluginstrPdata['pluginStatus'] = $_POST['pluginStatus'];

		$basicpluginstrPdata['standard_free'] = $_POST['basicpluginstr_free'];

		$basicpluginstrPdata['qty_rang'] = $_POST['basicpluginstrQty'];

		$basicpluginstrPdata['price'] = $_POST['basicpluginstrPrice'];

		$basicpluginstrPdata['clr1'] = $_POST['basicpluginstrClr1'];
		$basicpluginstrPdata['clr2'] = $_POST['basicpluginstrClr2'];
		$basicpluginstrPdata['clr3'] = $_POST['basicpluginstrClr3'];
		$basicpluginstrPdata['clr4'] = $_POST['basicpluginstrClr4'];
		$basicpluginstrPdata['clr5'] = $_POST['basicpluginstrClr5'];
		$basicpluginstrPdata['clr6'] = $_POST['basicpluginstrClr6'];
		$basicpluginstrPdata['clr7'] = $_POST['basicpluginstrClr7'];
		$basicpluginstrPdata['clr8'] = $_POST['basicpluginstrClr8'];


		//print_r($basicpluginstrPdata);

		if (!empty($basicpluginstrPdata)) {
			update_post_meta( $productId, '_basicpluginstrPdata', $basicpluginstrPdata);
		}

		
		update_post_meta( $productId, '_pluginStatus', $pluginStatus);
		

		die();
	}


	/* 
	* Display Product Option Data on Frontend
	*/
	function basicpluginstr_add_to_cart_form(){

		global $product; 

		$product_id  = $product->get_id();

		$_basicpluginstrPdata = get_post_meta( $product_id, '_basicpluginstrPdata', true );

		$_pluginStatus = get_post_meta( $product_id, '_pluginStatus', true );

		if ($_pluginStatus) {
		
		if ($_basicpluginstrPdata['qty_rang'][0] && $_basicpluginstrPdata['price'][0] && $_basicpluginstrPdata['clr1'][0]) {
			
		?>
			<div class="basicpluginstr-container" id="basicpluginstr-container">

				<h1>UUUUUU</h1>

			</div>
		<?php
		}
	}

	}


	/*
	* Frontend ajax calculate shirt price
	*/

	function basicpluginstr_my_action_function(){

		$productId = $_POST['productId'];

		$enterd_qty = $_POST['enterd_qty'];

		$ammountofcolor = $_POST['ammountofcolor'];

		$locationsides = $_POST['locationsides'];

		$addonoptiontotal = $_POST['addonoptiontotal'];

		$price_per_price = '';
		$_standard_free = '';
		$addon_opt_total = '';

		
		$_basicpluginstrPdata = get_post_meta( $productId, '_basicpluginstrPdata', true );

		/**/
		if (is_array($ammountofcolor)) {
			$ammountofcolor = count($ammountofcolor);
		}
		if (is_array($locationsides)) {
			$locationsides = count($locationsides);
		}
		if (is_array($addonoptiontotal)) {
			$addon_opt_total = array_sum($addonoptiontotal); 
		}
		if ($_basicpluginstrPdata['standard_free']) {
			$_standard_free = ($ammountofcolor*$locationsides)*$_basicpluginstrPdata['standard_free'];
		}
		/**/

		foreach ($_basicpluginstrPdata['qty_rang'] as $key => $value) 
		{

			$qty_rang = explode('-', $_basicpluginstrPdata['qty_rang'][$key]);

					
			if ($enterd_qty >= $qty_rang[0] && $enterd_qty <= $qty_rang[1] && $ammountofcolor) 
			{
				$price = $_basicpluginstrPdata['price'][$key];

				$clrPrice = $_basicpluginstrPdata['clr'.$ammountofcolor][$key];

				//Formula
				if ($addon_opt_total) {

					$calPricetotal = $price+$clrPrice*$locationsides;


					/*--calculating price per price--*/
					$_calPricetotal = $calPricetotal * $enterd_qty;

					$_addon_opt_total = $addon_opt_total * $enterd_qty;

					$total = $_calPricetotal+$_addon_opt_total+$_standard_free;

					$per_price = ($total / $enterd_qty);

					$price_per_price = number_format($per_price,4);
					/*--calculating price per price--*/

				}
				else{

					$calPricetotal = $price+$clrPrice*$locationsides;

					/*--calculating price per price--*/
					$_calPricetotal = $calPricetotal * $enterd_qty;

					$total = $_calPricetotal+$_standard_free;

					$per_price = ($total / $enterd_qty);

					$price_per_price = number_format($per_price,4);
					/*--calculating price per price--*/
				}
				
			}
			else
			{
				//echo "<h1>False</h1>";
			}


		}

		$myArr = array(
					'price'=>$price,
					'ammountOfcolor'=>$clrPrice,
					'locationside'=>$locationsides,
					'totalprice'=>$calPricetotal,
					'standard_free'=>$_standard_free,
					'price_per_price'=> $price_per_price,
					'addon_opt_total'=> $_addon_opt_total,
					'grand_total'=> $total
					);

		$myJSON = json_encode($myArr);

		echo $myJSON;
		die();
	}


	/*function add_cart_item($cart_item) { 

	

		if ( isset( $cart_item['basicpluginstr'] ) ) {

	    	foreach ( $cart_item['basicpluginstr'] as $basicpluginstr ) {
  
				$price = $basicpluginstr['price'];  
			}

			$cart_item['data']->set_price($price);
	    }
		return $cart_item;
	}

	function add_cart_item_data( $cart_item_data, $productId, $variationId ) {

		//
		if ($_POST['basicpluginstr_price_per_price_input']) {
			$pricePerprice = $_POST['basicpluginstr_price_per_price_input'];
		}
		else{
			$pricePerprice = $_POST['basicpluginstr_totalprice'];
		}
		//
		
		$_pluginStatus = get_post_meta( $productId, '_pluginStatus', true );

		if ($_pluginStatus && $_POST['basicpluginstr_totalprice']) {

			if ( empty( $cart_item_data['basicpluginstr'] ) ) {
				$cart_item_data['basicpluginstr'] = array();
			}

			$data[] = array(
					'name'  => 'Shirt Price: ',
					'value' => $_POST['basicpluginstr_totalprice'],
					'price' => $pricePerprice
					);
				
			$cart_item_data['basicpluginstr'] = array_merge( $cart_item_data['basicpluginstr'], $data);
		}

		return $cart_item_data;
	}

	function cus_woocommerce_get_item_data( $data, $cartItem ) {

	    if ( isset( $cartItem['basicpluginstr'] ) ) {

	    	foreach ( $cartItem['basicpluginstr'] as $basicpluginstr ) {

				$name = $basicpluginstr['name'];  

				$value = $basicpluginstr['value'];  

				$price = $basicpluginstr['price']; 

			}

	        $data[] = array(
	            'name' => $name,
	            'value' => $value,
	            'display' => 0
	        );
	    }

	    return $data;
	}



	function get_cart_item_from_session($cart_item, $values) {
		
		$cart_item = $this->add_cart_item($cart_item);
		if (!empty($cart_item)) {
			return $cart_item;
		}
		return $cart_item;
	}

	function cus_woocommerce_add_order_item_meta( $item_id, $values ) {
	 
	    if ( ! empty( $values['basicpluginstr'] ) ) {
			foreach ( $values['basicpluginstr'] as $basicpluginstr ) {

				$name = $basicpluginstr['name'];
				woocommerce_add_order_item_meta( $item_id, $name, $basicpluginstr['value'] );
			}
		}

	}*/

	

}
new basicpluginstr();

}