<?php

/**/

class CustomPostTemplates 
{
    function __construct(){
        add_action( 'add_meta_boxes', array( $this,'_namespace_create_metabox' ));
        add_action( 'save_post', array( $this,'save_post'));
        add_filter( 'single_template', array( $this,'filter_single_template'));
        add_filter( 'body_class', array( $this,'body_class'));
    }
    
    public function add_meta_box($id, $title, $function = '', $page, $context = 'advanced', $priority = 'default')
    {
        add_meta_box( $id, $title, array( &$this, $function == '' ? $id : $function ), $page, $context, $priority );
    }

    public function _namespace_create_metabox() {
        $post_types = apply_filters( 'cpt_post_types', array( 'destination' ) );
        foreach ( $post_types as $post_type )
            $this->add_meta_box( 'select_post_template', __( 'Post Template', 'custom-post-templates' ), 'select_post_template', $post_type, 'side', 'low' );
    }
    
    public function body_class( $classes ) {
        if ( ! $this->is_post_template() )
            return $classes;
        global $wp_query;
        $post = $wp_query->get_queried_object();
        $post_template = get_post_meta( $post->ID, 'custom_post_template', true );
        $classes[] = 'post-template';
        $classes[] = 'post-template-' . str_replace( '.php', '-php', $post_template );
        return $classes;
    }

    public function is_post_template($template = '') {
        if (!is_single()) {
            return false;
        }

        global $wp_query;

        $post = $wp_query->get_queried_object();
        $post_template = get_post_meta( $post->ID, 'custom_post_template', true );

        if ( empty( $template ) ) {
            if (!empty( $post_template ) ) {
                return true;
            }
        } elseif ( $template == $post_template) {
            return true;
        }

        return false;
    }

    public function select_post_template( $post )
    {
        $this->post_ID = $post->ID;

        $template_vars = array();
        $template_vars[ 'templates' ] = $this->get_post_templates();
        $template_vars[ 'custom_template' ] = $this->get_custom_post_template();
        
        $templates = $template_vars[ 'templates' ];
        $custom_template = $template_vars[ 'custom_template' ];
        
        ?>
        <!---->
        <?php if (!defined ('ABSPATH')) die ('No direct access allowed'); ?>
        <label class="hidden" for="page_template"><?php _e( 'Post Template', 'custom-post-templates' ); ?></label>
        <?php if ( $templates ) : ?>

            <input type="hidden" name="custom_post_template_present" value="1" />
            <select name="custom_post_template" id="custom_post_template">
                <option 
                    value='default'
                    <?php
                        if ( ! $custom_template ) {
                            echo "selected='selected'";
                        }
                    ?>><?php _e( 'Default Template' ); ?></option>
                <?php foreach( $templates AS $filename => $name ) { ?>
                    <option 
                        value='<?php echo $filename; ?>'
                        <?php
                            if ( $custom_template == $filename ) {
                                echo "selected='selected'";
                            }
                        ?>><?php echo $name; ?></option>
                <?php } ?>
            </select>

        <?php else : ?>

            <p><?php printf( __( 'This theme has no Template3' ) ); ?></p>

        <?php endif; ?>
        <!---->
        <?php
    }

    public function save_post( $post_ID )
    {
        $action_needed = (bool) @ $_POST[ 'custom_post_template_present' ];
        if ( ! $action_needed ) return;

        $this->post_ID = $post_ID;

        $template = (string) @ $_POST[ 'custom_post_template' ];
        $this->set_custom_post_template( $template );
    }

    public function filter_single_template( $template ) 
    {
        global $wp_query;

        $this->post_ID = $wp_query->post->ID;

        // No template? Nothing we can do.
        $template_file = $this->get_custom_post_template();

        if ( ! $template_file )
            return $template;

        // If there's a tpl in a (child theme or theme with no child)
        if ( file_exists( trailingslashit( STYLESHEETPATH ) . $template_file ) )
            return STYLESHEETPATH . DIRECTORY_SEPARATOR . $template_file;
        // If there's a tpl in the parent of the current child theme
        else if ( file_exists( TEMPLATEPATH . DIRECTORY_SEPARATOR . $template_file ) )
            return TEMPLATEPATH . DIRECTORY_SEPARATOR . $template_file;

        return $template;
    }

    
    protected function set_custom_post_template( $template )
    {
        delete_post_meta( $this->post_ID, 'custom_post_template' );
        if ( ! $template || $template == 'default' ) return;

        add_post_meta( $this->post_ID, 'custom_post_template', $template );
    }
    
    protected function get_custom_post_template()
    {
        $custom_template = get_post_meta( $this->post_ID, 'custom_post_template', true );
        return $custom_template;
    }

    protected function get_post_templates() 
    {
        $theme = wp_get_theme();

        $post_templates = array();

        $files = (array) $theme->get_files( 'php', 1 );

        foreach ( $files as $file => $full_path ) {
            $headers = get_file_data( $full_path, array( 'Template Name Posts' => 'Template Name Posts' ) );
            if ( empty( $headers['Template Name Posts'] ) )
                continue;
            $post_templates[ $file ] = $headers['Template Name Posts'];
        }

        return $post_templates;
    }
}
new CustomPostTemplates();
/**/

?>